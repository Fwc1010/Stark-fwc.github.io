<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hello World</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-15T00:30:01.001Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/15/hello-world/"/>
    <id>http://yoursite.com/2020/03/15/hello-world/</id>
    <published>2020-03-15T00:30:01.001Z</published>
    <updated>2020-03-15T00:30:01.001Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>javascript的副本</title>
    <link href="http://yoursite.com/2020/03/10/javascript%E7%9A%84%E5%89%AF%E6%9C%AC/"/>
    <id>http://yoursite.com/2020/03/10/javascript%E7%9A%84%E5%89%AF%E6%9C%AC/</id>
    <published>2020-03-10T13:36:16.332Z</published>
    <updated>2020-03-15T02:22:17.523Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript学习笔记–廖雪峰的网站"><a href="#JavaScript学习笔记–廖雪峰的网站" class="headerlink" title="JavaScript学习笔记–廖雪峰的网站"></a>JavaScript学习笔记–廖雪峰的网站</h3><p>1.脚本位置：一般把JavaScript代码放到<head>中,也可以放在文件中引入</p><h4 id="语法笔记："><a href="#语法笔记：" class="headerlink" title="语法笔记："></a>语法笔记：</h4><p>第一种是<code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；</p><p>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回<code>false</code>，如果一致，再比较。</p><p>JavaScript的设计者希望用<code>null</code>表示一个空的值，而<code>undefined</code>表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用<code>null</code>。<code>undefined</code>仅仅在判断函数参数是否传递的情况下有用。</p><p>NaN; // NaN表示Not a Number，当无法计算结果时用NaN表示<br>      Infinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</p><p>要判断一个属性是否是自身拥有的，而不是继承得到的，可以用<code>hasOwnProperty()</code>方法</p><p>JavaScript把<code>null</code>、<code>undefined</code>、<code>0</code>、<code>NaN</code>和空字符串<code>&#39;&#39;</code>视为<code>false</code>，其他值一概视为true</p><p>JavaScript还有一个免费赠送的关键字<code>arguments</code>，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。<code>arguments</code>类似<code>Array</code>但它不是一个Array</p><p>为了解决块级作用域，ES6引入了新的关键字<code>let</code>，用<code>let</code>替代<code>var</code>可以申明一个块级作用域的变量，比如用在for循环里</p><h3 id="apply"><a href="#apply" class="headerlink" title="==apply=="></a>==apply==</h3><p>虽然在一个独立的函数调用中，根据是否是strict模式，<code>this</code>指向<code>undefined</code>或<code>window</code>，不过，我们还是可以控制<code>this</code>的指向的！</p><p>要指定函数的<code>this</code>指向哪个对象，可以用函数本身的<code>apply</code>方法，它接收两个参数，第一个参数就是需要绑定的<code>this</code>变量，第二个参数是<code>Array</code>，表示函数本身的参数。</p><p>==另一个与<code>apply()</code>类似的方法是<code>call()</code>==，唯一区别是：</p><ul><li><code>apply()</code>把参数打包成<code>Array</code>再传入；</li><li><code>call()</code>把参数按顺序传入。</li></ul><p>比如调用<code>Math.max(3, 5, 4)</code>，分别用<code>apply()</code>和<code>call()</code>实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.max.apply(null, [3, 5, 4]); &#x2F;&#x2F; 5</span><br><span class="line">Math.max.call(null, 3, 5, 4); &#x2F;&#x2F; 5</span><br></pre></td></tr></table></figure><p>对普通函数调用，我们通常把<code>this</code>绑定为<code>null</code>。</p><p>如何理解Javascript的原型和闭包（单独一文）</p><p>简单来说闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来。</p><p>==关于generator==</p><p>generator（生成器）是ES6标准引入的新的数据类型。一个generator看上去像一个函数，但可以返回多次。</p><p>generator和普通函数相比，有什么用？</p><p>因为generator可以在执行过程中多次返回，所以它看上去就像一个可以记住执行状态的函数，利用这一点，写一个generator就可以实现需要用面向对象才能实现的功能。</p><p>关于标准对象总结一下，有这么几条规则需要遵守：</p><ul><li>不要使用<code>new Number()</code>、<code>new Boolean()</code>、<code>new String()</code>创建包装对象；</li><li>用<code>parseInt()</code>或<code>parseFloat()</code>来转换任意类型到<code>number</code>；</li><li>用<code>String()</code>来转换任意类型到<code>string</code>，或者直接调用某个对象的<code>toString()</code>方法；</li><li>通常不必把任意类型转换为<code>boolean</code>再判断，因为可以直接写<code>if (myVar) {...}</code>；</li><li><code>typeof</code>操作符可以判断出<code>number</code>、<code>boolean</code>、<code>string</code>、<code>function</code>和<code>undefined</code>；</li><li>判断<code>Array</code>要使用<code>Array.isArray(arr)</code>；</li><li>判断<code>null</code>请使用<code>myVar === null</code>；</li><li>判断某个全局变量是否存在用<code>typeof window.myVar === &#39;undefined&#39;</code>；</li><li>函数内部判断某个变量是否存在用<code>typeof myVar === &#39;undefined&#39;</code>。</li></ul><p>最后有细心的同学指出，任何对象都有<code>toString()</code>方法吗？<code>null</code>和<code>undefined</code>就没有！确实如此，这两个特殊值要除外，虽然<code>null</code>还伪装成了<code>object</code>类型。</p><p>更细心的同学指出，<code>number</code>对象调用<code>toString()</code>报SyntaxError：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123.toString(); &#x2F;&#x2F; SyntaxError</span><br></pre></td></tr></table></figure><p>遇到这种情况，要特殊处理一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123..toString(); &#x2F;&#x2F; &#39;123&#39;, 注意是两个点！</span><br><span class="line">(123).toString(); &#x2F;&#x2F; &#39;123&#39;</span><br></pre></td></tr></table></figure><p>不要问为什么，这就是JavaScript代码的乐趣！</p><p>JavaScript的原型继承实现方式就是：</p><ol><li>定义新的构造函数，并在内部用<code>call()</code>调用希望“继承”的构造函数，并绑定<code>this</code>；</li><li>借助中间函数<code>F</code>实现原型链继承，最好通过封装的<code>inherits</code>函数完成；</li><li>继续在新的构造函数的原型上定义新方法。</li></ol><p>ES6引入的<code>class</code>和原有的JavaScript原型继承有什么区别呢？实际上它们没有任何区别，<code>class</code>的作用就是让JavaScript引擎去实现原来需要我们自己编写的原型链代码。简而言之，用<code>class</code>的好处就是极大地简化了原型链代码。</p><p>你一定会问，<code>class</code>这么好用，能不能现在就用上？</p><p>现在用还早了点，因为不是所有的主流浏览器都支持ES6的class。如果一定要现在就用上，就需要一个工具把<code>class</code>代码转换为传统的<code>prototype</code>代码，可以试试<a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a>这个工具。</p><p><img src="http://image-fwc.s3-cn-east-1.qiniucs.com/FnZXb0os8_yg8R71dTi5l5UbdQMN" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript学习笔记–廖雪峰的网站&quot;&gt;&lt;a href=&quot;#JavaScript学习笔记–廖雪峰的网站&quot; class=&quot;headerlink&quot; title=&quot;JavaScript学习笔记–廖雪峰的网站&quot;&gt;&lt;/a&gt;JavaScript学习笔记–廖雪峰的网站&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
